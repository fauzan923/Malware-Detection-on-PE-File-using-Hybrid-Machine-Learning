import yfinance as yf
import streamlit as st
import pandas as pd
import ember
import numpy as np
import re
import joblib

from sklearn.metrics import accuracy_score

st.write("""
# Deteksi Malware terhadap PE File 
""")

st.sidebar.header('User Input PE File')

st.sidebar.markdown("""
[Example CSV input file](https://raw.githubusercontent.com/dataprofessor/data/master/penguins_example.csv)
""")

# Collects user input features into dataframe
uploaded_file = st.sidebar.file_uploader("Upload .exe file yang akan dideteksi", type=["exe"])

if uploaded_file is not None:

    # Memprediksi PE File yang akan Diprediksi Ekstraksi fitur PE Filenya dahulu, lalu hasil ekstraksinya diprediksi pakai model yang sudah dibuat dan ditraining
    df_columns = pd.read_csv('Bodmas/ember_2381_feature_names.txt', delimiter='\n')
    df_columns = list(df_columns['0'])
    extractor = ember.PEFeatureExtractor() 
    file_data = uploaded_file.read()
    extracted_features = np.array(extractor.feature_vector(file_data), dtype=np.float32)
    df_PE = pd.DataFrame([extracted_features], columns=df_columns)
    df_PE = df_PE.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))

    # NGEDROP FEATURE YANG TIDAK TERPAKAI PADA df_PE SESUAI DENGAN HASIL SELEKSI FITUR YANG SUDAH PERNAH DILAKUKAN
    selected_feat = pd.read_csv('output.txt', delimiter='\n')
    selected_feat = list(selected_feat['0'])
    columns_train_not_used = [column for column in df_PE.columns if column not in selected_feat]
    df_PE = df_PE.drop(columns_train_not_used,axis=1)

    # Ngeload hasil dari model hybrid machine learning yang sudah di training 
    sclfjl = joblib.load('sclf_joblib')
    sclfjl_pred = sclfjl.predict(df_PE)
    sclf_pred_prob = sclfjl.predict_proba(df_PE)
    # y_test = pd.read_csv('y_test.csv')
    # score = accuracy_score(y_test, sclfjl_pred)*100
    # classification_report(y_test, CAT_pred, target_names=['Benign', 'Malware'])

else:
    def user_input_features():
        data = {'test': 'lol'}
        features = pd.DataFrame(data, index=[0])
        return features
    df_PE = user_input_features()
    sclfjl_pred = user_input_features()
    sclf_pred_prob = user_input_features()

# Ngeload hasil dari model hybrid machine learning yang sudah di training 
# sclfjl = joblib.load('sclf_joblib')

st.write('## Hasil ekstraksi fitur dari PE File \n',df_PE)
st.write('## Jumlah fitur yang dipakai berdasarkan hasil seleksi fitur \n',len(df_PE.columns))
st.write('## Nilai probabilitas machine learning dalam mendeteksi malware pada PE File \n', sclf_pred_prob)
st.write('## Hasil prediksi hybrid machine learning pada PE File yang dideteksi \n', sclfjl_pred)



# # https://towardsdatascience.com/how-to-get-stock-data-using-python-c0de1df17e75
# # define the ticker symbol
# tickerSymbol = 'GOOGL'
# #get data on this ticker
# tickerData = yf.Ticker(tickerSymbol)
# #get the historical prices for this ticker
# tickerDf = tickerData.history(period='1d', start='2010-5-31', end='2020-5-31')
# # Open	High	Low	Close	Volume	Dividends	Stock Splits

# st.line_chart(tickerDf.Close)
# st.line_chart(tickerDf.Volume)